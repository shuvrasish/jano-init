{"version":3,"sources":["firebase.js","NotificationDialog.js","Cards.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["database","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","NotificationDialog","useState","open","setOpen","Notification","permission","notifPermission","setNotifPermission","handleClose","className","IconButton","onClick","fontSize","Dialog","onClose","aria-labelledby","DialogTitle","id","DialogContent","dividers","Typography","variant","gutterBottom","DialogActions","Button","autoFocus","messaging","isSupported","requestPermission","then","console","log","getToken","vapidKey","data","auth","currentUser","collection","doc","update","token","FieldValue","arrayUnion","email","arrayRemove","catch","err","error","color","Cards","props","onCollectionUpdate","querySnapshot","cards","forEach","categories","heading","image_links","main_category","ns","pageid","reference","sid","subheading","summary","webpage_url","state","liked","includes","disliked","push","key","setState","slice","length","swiped","swipeDirection","arry","cardid","pop","withoutlogin","withlogin","orderBy","users","unsubscribe","totalshare","totalfeedback","totallikes","totaldislikes","this","onSnapshot","map","name","content","onSwipe","renderButtons","left","right","href","feedback","handleWeb","handleShare","data-action","src","alt","replace","React","Component","App","path","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.af678125.chunk.js","sourcesContent":["// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nimport firebase from \"firebase\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/analytics\"\r\n\r\n\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyC_PJ7fe-WikPfEpF-eL_qft93gezWfUeA\",\r\n  authDomain: \"swipeekaro.firebaseapp.com\",\r\n  projectId: \"swipeekaro\",\r\n  storageBucket: \"swipeekaro.appspot.com\",\r\n  messagingSenderId: \"110354245418\",\r\n  appId: \"1:110354245418:web:832d427fc6da9882abe053\",\r\n  measurementId: \"G-C27D345JWK\"\r\n};\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\nconst database = firebaseApp.firestore();\r\n\r\n\r\nexport default database;","import {\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle,\r\n  Typography,\r\n  IconButton,\r\n} from \"@material-ui/core\";\r\nimport NotificationsActiveIcon from \"@material-ui/icons/NotificationsActive\";\r\nimport database from \"./firebase\";\r\nimport firebase from \"firebase/app\";\r\nimport React, { useState } from \"react\";\r\n\r\nconst NotificationDialog = () => {\r\n  const [open, setOpen] = useState(false);\r\n  const [notifPermission, setNotifPermission] = useState(\r\n    Notification.permission\r\n  );\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n  //handler for notification permission dialox box\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  //handler for allowing notifications.\r\n  //once notifications are allowed or blocked, the option can only be changed from the browser settings and the popup wont appear unless ask option is currently selected in the browser settings\r\n  const messagingNotificationHandler = () => {\r\n    let messaging = null;\r\n    if (firebase.messaging.isSupported()) {\r\n      messaging = firebase.messaging();\r\n      //using \"messaging\" shows warning so replaced it with \"Notification\" which does the same thing\r\n      Notification.requestPermission()\r\n        .then((permission) => {\r\n          console.log(`Permission ${permission}`);\r\n          setNotifPermission(permission);\r\n          return messaging.getToken({\r\n            vapidKey:\r\n              \"BNr6t72DsL2tuv-9_pcEhQqgQv-A1Irqpaohv5k48vC2Wg-Hf58bORmBK6g8adqT4hHOTC7IXaVr_Yjl1Vkh9Oc\",\r\n          });\r\n        })\r\n        .then((data) => {\r\n          console.log(data);\r\n          if (firebase.auth().currentUser == null) {\r\n            database\r\n              .collection(\"TokenWithoutLogin\")\r\n              .doc(\"TokenWithoutLogin\")\r\n              .update({\r\n                token: firebase.firestore.FieldValue.arrayUnion(data),\r\n              });\r\n          } else {\r\n            database\r\n              .collection(\"Users\")\r\n              .doc(firebase.auth().currentUser.email)\r\n              .update({\r\n                token: data,\r\n              });\r\n            database\r\n              .collection(\"TokenWithoutLogin\")\r\n              .doc(\"TokenWithoutLogin\")\r\n              .update({\r\n                token: firebase.firestore.FieldValue.arrayRemove(data),\r\n              });\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          console.error(err);\r\n        });\r\n    } else {\r\n      console.log(\"Firebase Messaging not supported!\");\r\n    }\r\n    setOpen(false);\r\n  };\r\n  return (\r\n    <div className=\"notif-container\">\r\n      {notifPermission === \"default\" ? (\r\n        <IconButton onClick={handleOpen}>\r\n          <NotificationsActiveIcon fontSize=\"large\" />\r\n        </IconButton>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      <Dialog\r\n        onClose={handleClose}\r\n        aria-labelledby=\"customized-dialog-title\"\r\n        open={open}\r\n      >\r\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n          Ask for Notification Permissions?\r\n        </DialogTitle>\r\n        <DialogContent dividers>\r\n          <Typography variant=\"body1\" gutterBottom>\r\n            Note: Changes will be permanent unless you change it from the\r\n            browser site settings.\r\n          </Typography>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button\r\n            autoFocus\r\n            onClick={messagingNotificationHandler}\r\n            color=\"primary\"\r\n          >\r\n            <Typography variant=\"button\">Yes</Typography>\r\n          </Button>\r\n          <Button variant=\"button\" onClick={handleClose} color=\"primary\">\r\n            No\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NotificationDialog;\r\n","import React from \"react\";\r\nimport database from \"./firebase\";\r\nimport \"./Cards.css\";\r\nimport \"./SwipeButtons.css\";\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\r\nimport CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport WhatsAppIcon from \"@material-ui/icons/WhatsApp\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport FeedbackIcon from \"@material-ui/icons/Feedback\";\r\nimport LanguageIcon from \"@material-ui/icons/Language\";\r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/analytics\";\r\nimport { Swipeable, direction } from \"react-deck-swiper\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport ShareIcon from \"@material-ui/icons/Share\";\r\nimport MetaTags from \"react-meta-tags\";\r\n\r\nclass Cards extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.withoutlogin = database.collection(\"CardsWithoutLogin\");\r\n    this.withlogin = database\r\n      .collection(\"CardsWithLogin\")\r\n      .orderBy(\"sid\", \"asc\");\r\n    this.users = database.collection(\"Users\");\r\n    this.unsubscribe = null;\r\n    this.state = {\r\n      cards: [],\r\n      liked: [],\r\n      disliked: [],\r\n      totalshare: 0,\r\n      totalfeedback: 0,\r\n      totallikes: 0,\r\n      totaldislikes: 0,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.unsubscribe = this.withoutlogin.onSnapshot(this.onCollectionUpdate);\r\n  }\r\n\r\n  onCollectionUpdate = (querySnapshot) => {\r\n    const cards = [];\r\n\r\n    querySnapshot.forEach((doc) => {\r\n      const {\r\n        categories,\r\n        heading,\r\n        id,\r\n        image_links,\r\n        main_category,\r\n        ns,\r\n        pageid,\r\n        reference,\r\n        sid,\r\n        subheading,\r\n        summary,\r\n        webpage_url,\r\n      } = doc.data();\r\n      if (\r\n        !(this.state.liked.includes(id) || this.state.disliked.includes(id))\r\n      ) {\r\n        cards.push({\r\n          key: doc.id,\r\n          doc, // DocumentSnapshot\r\n          categories,\r\n          heading,\r\n          id,\r\n          image_links,\r\n          main_category,\r\n          ns,\r\n          pageid,\r\n          reference,\r\n          sid,\r\n          subheading,\r\n          summary,\r\n          webpage_url,\r\n        });\r\n      }\r\n    });\r\n    //console.log(\"Cards on screen: \"+cards.length)\r\n    this.setState({\r\n      cards: [...this.state.cards, ...cards.slice(0, 5)],\r\n    });\r\n    console.log(\"Cards on screen: \" + this.state.cards.length);\r\n    //this.cardsanalytics()\r\n  };\r\n\r\n  swiped = (swipeDirection) => {\r\n    var arry = this.state.cards;\r\n    var cardid = arry[arry.length - 1].id;\r\n\r\n    console.log(cardid + \" swiped \" + swipeDirection);\r\n\r\n    arry.pop();\r\n    this.setState({ cards: arry });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        {this.state.cards.map((cards) => (\r\n          <div key={cards.id} id={cards.id}>\r\n            <MetaTags>\r\n              <title>{cards.heading}</title>\r\n              <meta name=\"description\" content={cards.subheading} />\r\n            </MetaTags>\r\n            <Swipeable\r\n              onSwipe={this.swiped}\r\n              renderButtons={({ left, right }) => (\r\n                <div className=\"btn\">\r\n                  <div className=\"swipeButtons\">\r\n                    <IconButton\r\n                      className=\"swipeButtons_rep\"\r\n                      href=\"https://docs.google.com/forms/u/2/d/e/1FAIpQLSdzFp8LdIP4cOHMs6mMSXXALHm1n-DXo1HHxQPBM8SYX96n7Q/viewform?embedded=true\"\r\n                      onClick={this.feedback}\r\n                    >\r\n                      <FeedbackIcon fontSize=\"large\" />\r\n                    </IconButton>\r\n\r\n                    <IconButton className=\"swipeButtons_canc\" onClick={left}>\r\n                      <CancelIcon fontSize=\"large\" />\r\n                    </IconButton>\r\n                    <IconButton\r\n                      className=\"swipeButtons_web\"\r\n                      onClick={this.handleWeb}\r\n                    >\r\n                      <LanguageIcon fontSize=\"large\" />\r\n                    </IconButton>\r\n                    <IconButton className=\"swipeButtons_fav\" onClick={right}>\r\n                      <FavoriteIcon fontSize=\"large\" />\r\n                    </IconButton>\r\n                    <IconButton\r\n                      className=\"swipeButtons_what\"\r\n                      onClick={this.handleShare}\r\n                      data-action=\"share/whatsapp/share\"\r\n                    >\r\n                      <ShareIcon fontSize=\"large\" />\r\n                    </IconButton>\r\n                  </div>\r\n                </div>\r\n              )}\r\n            >\r\n              <div className=\"card\">\r\n                <div className=\"buttonFalse\">\r\n                  <img src={cards.image_links[0]} alt={cards.heading} />\r\n                </div>\r\n                <div className=\"post-content\">\r\n                  <div className=\"category\">\r\n                    <mark className=\"highlight\">\r\n                      {\" \"}\r\n                      {\"  #\" + cards.main_category + \"  \"}{\" \"}\r\n                    </mark>\r\n                  </div>\r\n                  <h1 className=\"title\">{cards.heading}</h1>\r\n                  <div className=\"sub_title\">\r\n                    <p>{cards.subheading}</p>\r\n                  </div>\r\n\r\n                  <hr className=\"solid\"></hr>\r\n\r\n                  <p className=\"descriptionn\">\r\n                    {cards.summary.replace(/@n/gi, \"\\n\\n•\")}\r\n                    <br />\r\n                    <br />\r\n                    <b>{cards.reference}</b>\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </Swipeable>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Cards;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\n\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\n\r\n//firebase\r\nimport \"firebase/analytics\";\r\n\r\n//Components\r\nimport NotificationDialog from \"./NotificationDialog\";\r\nimport Cards from \"./Cards\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <NotificationDialog />\r\n      <Router>\r\n        <Switch>\r\n          {/* <Route path=\"/card/:auth/:id\">\r\n            <Header />\r\n            <DynamicCards />\r\n          </Route>\r\n          <Route path=\"/profile\">\r\n            <Header />\r\n            <Profile />\r\n          </Route> */}\r\n          <Route path=\"/\">\r\n            {/* <Header /> */}\r\n            <Cards />\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.register();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}